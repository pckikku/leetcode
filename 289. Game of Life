public class Solution {
    public void gameOfLife(int[][] board) {
        // Corner case
        if(board == null || board.length == 0) return;
        
        int m = board.length;
        int n = board[0].length;
        
        // Iterate over every cell
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                int lives = liveNeighbors(board, m, n, i, j);
                
                // If current is live, only when it has 2 or 3 neighbors can it live
                if(board[i][j] == 1 && lives >= 2 && lives <= 3){
                    board[i][j] = 3;
                }
                // If current is dead, only when it has 3 neighbors can it live
                if(board[i][j] == 0 && lives == 3){
                    board[i][j] = 2;
                }
            }
        }
        
        // Shift every cell
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                board[i][j] >>= 1;
            }
        }
    }
    
    private int liveNeighbors(int[][] board, int m, int n, int i, int j){
        int lives = 0;
        for(int x = Math.max(i - 1, 0); x <= Math.min(i + 1, m - 1); x++){
            for(int y = Math.max(j - 1, 0); y <= Math.min(j + 1, n - 1); y++){
                lives += board[x][y] & 1;
            }
        }
        // Minus self
        lives -= board[i][j] & 1;
        return lives;
    }
}
